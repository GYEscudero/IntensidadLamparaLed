
LedDimmmer4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000589  0000063d  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000b6  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a52  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035e  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000221  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000574  00000574  00000628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000210c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_pwm 0000002c  000004a0  000004a0  00000554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.push_button 00000030  00000470  00000470  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.pwm_selector 00000096  0000027a  0000027a  0000032e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       00000007  00800100  00000582  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.led_level 0000004c  000003e0  000003e0  00000494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000024  000004cc  000004cc  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_16 00000072  00000310  00000310  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.counter  00000001  0080010b  0080010b  0000063d  2**0
                  ALLOC
 22 .bss.duty_cycle 00000004  00800107  00800107  0000063d  2**0
                  ALLOC
 23 .text         00000008  0000055e  0000055e  00000612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         000000de  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         0000005e  00000382  00000382  00000436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000c  00000552  00000552  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         00000006  0000056e  0000056e  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         0000000e  00000528  00000528  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         0000000e  00000536  00000536  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         00000022  000004f0  000004f0  000005a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         00000044  0000042c  0000042c  000004e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         0000000e  00000544  00000544  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         00000008  00000566  00000566  0000061a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         000000d4  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  0000057c  0000057c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  0000057e  0000057e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  00000580  00000580  00000634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    00000016  00000512  00000512  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  00000578  00000578  0000062c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
   8:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
   c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  10:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  14:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  18:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  1c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  20:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  24:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  28:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  2c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  30:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  34:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  38:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  3c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  40:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_16>
  44:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  4c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  50:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  54:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  58:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  5c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  60:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>
  64:	0c 94 ba 02 	jmp	0x574	; 0x574 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 07       	cpc	r16, r17
  6c:	00 05       	cpc	r16, r0
  6e:	82 01       	movw	r16, r4
  70:	07 01       	movw	r0, r14
  72:	0c 80       	ldd	r0, Y+4	; 0x04

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
  c0:	0c 94 89 02 	jmp	0x512	; 0x512 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000574 <__bad_interrupt>:
 574:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_pwm:

000004a0 <init_pwm>:

/* Inicio de la función init_pwm */
void init_pwm ()
{
	/* Configuración de puertos */
	DDRD |= (1 << DDD6);/* PIN D6 Configurado como salida para señal PWM */
 4a0:	8a b1       	in	r24, 0x0a	; 10
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (~(1 << DDD0) & ~(1 << DDD1)); /* Configuracion de pines como entrada para los push button */
 4a6:	8a b1       	in	r24, 0x0a	; 10
 4a8:	8c 7f       	andi	r24, 0xFC	; 252
 4aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= ((1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5)); /* Configuración de pines
 4ac:	87 b1       	in	r24, 0x07	; 7
 4ae:	8f 63       	ori	r24, 0x3F	; 63
 4b0:	87 b9       	out	0x07, r24	; 7
																												  para nivel de intensidad
																												  de LEDs */
	/* Configuración TCCR0A */
	TCCR0A |=(
 4b2:	84 b5       	in	r24, 0x24	; 36
 4b4:	83 68       	ori	r24, 0x83	; 131
 4b6:	84 bd       	out	0x24, r24	; 36
	
	~(1 << COM0A0) |		/* Clear OC0A... */
	(1 << COM0A1));	/* on compare match */
	
	/* Configuración TCCR0B */
	TCCR0B |=(
 4b8:	85 b5       	in	r24, 0x25	; 37
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	85 bd       	out	0x25, r24	; 37
	~(1 << FOC0B) &		/* Force Output Compare B (Desactivado) */
	
	~(1 << FOC0A));		/* Force Output Compare A (Desactivado) */
	
	/* Configuración TIMSK0 */
	TIMSK0 |= (
 4be:	ee e6       	ldi	r30, 0x6E	; 110
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
	~(1 << OCIE0A) &	/* Output A Match Interrupt */
	
	~(1 << OCIE0B)); 	/* Output B Match Interrupt */

	/* Configuración OCR0A */
	OCR0A = 0;			/* Valor de comparacion en 0 */
 4c8:	17 bc       	out	0x27, r1	; 39
 4ca:	08 95       	ret

Disassembly of section .text.push_button:

00000470 <push_button>:
#include <xc.h>
#include <avr/io.h>

/* Inicio de la función push_button */
int8_t push_button (int8_t *count)
{
 470:	fc 01       	movw	r30, r24
	/* Atenuacíon de LEDs - Detección del PIND0 */
	if ((PIND & (1 << PIND0)) == 0)
 472:	48 99       	sbic	0x09, 0	; 9
 474:	08 c0       	rjmp	.+16     	; 0x486 <push_button+0x16>
	{
		(*count)--;
 476:	80 81       	ld	r24, Z
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
		/* Limitador */
		if (*count <= 0 )
 47c:	18 16       	cp	r1, r24
 47e:	0c f0       	brlt	.+2      	; 0x482 <push_button+0x12>
		{
			*count = 0;
 480:	10 82       	st	Z, r1
		}
		
		/* Ciclo antirrebote mecanico de push button */
		while ((PIND & (1 << PIND0)) == 0)
 482:	48 9b       	sbis	0x09, 0	; 9
 484:	fe cf       	rjmp	.-4      	; 0x482 <push_button+0x12>
			
		}
	}
	
	/* Aumento de LEDs - Detección del PIND1 */
	if ((PIND & (1 << PIND1)) == 0)
 486:	49 99       	sbic	0x09, 1	; 9
 488:	09 c0       	rjmp	.+18     	; 0x49c <push_button+0x2c>
	{
		(*count)++;
 48a:	80 81       	ld	r24, Z
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	80 83       	st	Z, r24
		
		/* Limitador */
		if (*count >= 5 )
 490:	85 30       	cpi	r24, 0x05	; 5
 492:	14 f0       	brlt	.+4      	; 0x498 <push_button+0x28>
		{
			*count = 5;
 494:	85 e0       	ldi	r24, 0x05	; 5
 496:	80 83       	st	Z, r24
		}
		
		/* Ciclo antirrebote mecanico de push button */
		while ((PIND & (1 << PIND1)) == 0)
 498:	49 9b       	sbis	0x09, 1	; 9
 49a:	fe cf       	rjmp	.-4      	; 0x498 <push_button+0x28>
			
		}
	}
	
	return *count;
 49c:	80 81       	ld	r24, Z
 49e:	08 95       	ret

Disassembly of section .text.pwm_selector:

0000027a <pwm_selector>:

/* Inicio de la función pwm_selector */
double pwm_selector (int8_t count, double *d_c)
{
	/* Inicio del switch-case */
	switch (count)
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	01 f1       	breq	.+64     	; 0x2be <pwm_selector+0x44>
 27e:	2c f4       	brge	.+10     	; 0x28a <pwm_selector+0x10>
 280:	88 23       	and	r24, r24
 282:	49 f0       	breq	.+18     	; 0x296 <pwm_selector+0x1c>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	89 f0       	breq	.+34     	; 0x2aa <pwm_selector+0x30>
 288:	3d c0       	rjmp	.+122    	; 0x304 <pwm_selector+0x8a>
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	61 f1       	breq	.+88     	; 0x2e6 <pwm_selector+0x6c>
 28e:	0c f1       	brlt	.+66     	; 0x2d2 <pwm_selector+0x58>
 290:	85 30       	cpi	r24, 0x05	; 5
 292:	99 f1       	breq	.+102    	; 0x2fa <pwm_selector+0x80>
 294:	37 c0       	rjmp	.+110    	; 0x304 <pwm_selector+0x8a>
	{	/* Selección de dutys a trabajar */
		case 0:
		{
			*d_c = 100;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	a8 ec       	ldi	r26, 0xC8	; 200
 29c:	b2 e4       	ldi	r27, 0x42	; 66
 29e:	fb 01       	movw	r30, r22
 2a0:	80 83       	st	Z, r24
 2a2:	91 83       	std	Z+1, r25	; 0x01
 2a4:	a2 83       	std	Z+2, r26	; 0x02
 2a6:	b3 83       	std	Z+3, r27	; 0x03
		}
		break;
 2a8:	2d c0       	rjmp	.+90     	; 0x304 <pwm_selector+0x8a>
		
		case 1:
		{
			*d_c = 20;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	a0 ea       	ldi	r26, 0xA0	; 160
 2b0:	b1 e4       	ldi	r27, 0x41	; 65
 2b2:	fb 01       	movw	r30, r22
 2b4:	80 83       	st	Z, r24
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	a2 83       	std	Z+2, r26	; 0x02
 2ba:	b3 83       	std	Z+3, r27	; 0x03
		}
		break;
 2bc:	23 c0       	rjmp	.+70     	; 0x304 <pwm_selector+0x8a>
		
		case 2:
		{
			*d_c = 40;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	a0 e2       	ldi	r26, 0x20	; 32
 2c4:	b2 e4       	ldi	r27, 0x42	; 66
 2c6:	fb 01       	movw	r30, r22
 2c8:	80 83       	st	Z, r24
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	a2 83       	std	Z+2, r26	; 0x02
 2ce:	b3 83       	std	Z+3, r27	; 0x03
		}
		break;
 2d0:	19 c0       	rjmp	.+50     	; 0x304 <pwm_selector+0x8a>
		
		case 3:
		{
			*d_c = 60;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	a0 e7       	ldi	r26, 0x70	; 112
 2d8:	b2 e4       	ldi	r27, 0x42	; 66
 2da:	fb 01       	movw	r30, r22
 2dc:	80 83       	st	Z, r24
 2de:	91 83       	std	Z+1, r25	; 0x01
 2e0:	a2 83       	std	Z+2, r26	; 0x02
 2e2:	b3 83       	std	Z+3, r27	; 0x03
		}
		break;
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <pwm_selector+0x8a>
		
		case 4:
		{
			*d_c = 80;	
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a0 ea       	ldi	r26, 0xA0	; 160
 2ec:	b2 e4       	ldi	r27, 0x42	; 66
 2ee:	fb 01       	movw	r30, r22
 2f0:	80 83       	st	Z, r24
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	a2 83       	std	Z+2, r26	; 0x02
 2f6:	b3 83       	std	Z+3, r27	; 0x03
		}
		break;
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <pwm_selector+0x8a>
		
		case 5:
		{
			*d_c = 0;
 2fa:	fb 01       	movw	r30, r22
 2fc:	10 82       	st	Z, r1
 2fe:	11 82       	std	Z+1, r1	; 0x01
 300:	12 82       	std	Z+2, r1	; 0x02
 302:	13 82       	std	Z+3, r1	; 0x03
		}
		break;
	} /* Fin del switch-case */
	
	return *d_c;	/* Retorno de duty_cicle */
 304:	fb 01       	movw	r30, r22
 306:	60 81       	ld	r22, Z
 308:	71 81       	ldd	r23, Z+1	; 0x01
 30a:	82 81       	ldd	r24, Z+2	; 0x02
 30c:	93 81       	ldd	r25, Z+3	; 0x03
	
 30e:	08 95       	ret

Disassembly of section .text.led_level:

000003e0 <led_level>:
#include <xc.h>
#include <avr/io.h>

/* Inicio de la función  led_level */
void led_level (int8_t count)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	27 97       	sbiw	r28, 0x07	; 7
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
	/* variable */
	int8_t indicator [7] = {0b00000001,
 3f4:	97 e0       	ldi	r25, 0x07	; 7
 3f6:	e0 e0       	ldi	r30, 0x00	; 0
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	de 01       	movw	r26, r28
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	01 90       	ld	r0, Z+
 400:	0d 92       	st	X+, r0
 402:	9a 95       	dec	r25
 404:	e1 f7       	brne	.-8      	; 0x3fe <led_level+0x1e>
							0b00001111,
							0b00011111,
							0b00111111,
							0b01111111};
	
	PORTC = indicator [count]; /* Nivel de iluminicidad de Leds se puestra por el PUERTO C */
 406:	e1 e0       	ldi	r30, 0x01	; 1
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ec 0f       	add	r30, r28
 40c:	fd 1f       	adc	r31, r29
 40e:	e8 0f       	add	r30, r24
 410:	f1 1d       	adc	r31, r1
 412:	87 fd       	sbrc	r24, 7
 414:	fa 95       	dec	r31
 416:	80 81       	ld	r24, Z
 418:	88 b9       	out	0x08, r24	; 8
} /* Fin de la función led_level */
 41a:	27 96       	adiw	r28, 0x07	; 7
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

Disassembly of section .text.main:

000004cc <main>:
int8_t counter = 0;

/* Inicio de la función principal */
int main(void)
{
	init_pwm ();	/* Llamado a la funcion que inicializa la señal PWM */
 4cc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <init_pwm>
	sei();			/* Habilita interrupciones del microcontrolador */
 4d0:	78 94       	sei
    
	while(1)
	{
		push_button (&counter);					/* Llamado a la función que detecta los push button */
 4d2:	8b e0       	ldi	r24, 0x0B	; 11
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 38 02 	call	0x470	; 0x470 <push_button>
        pwm_selector (counter, &duty_cycle);	/* Llamado a la función que cambia el ciclo del trabajo de PWM */
 4da:	67 e0       	ldi	r22, 0x07	; 7
 4dc:	71 e0       	ldi	r23, 0x01	; 1
 4de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter>
 4e2:	0e 94 3d 01 	call	0x27a	; 0x27a <pwm_selector>
		led_level (counter);					/* Llamado a la función que muestra el nivel de iluminación */ 
 4e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter>
 4ea:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <led_level>
 4ee:	f1 cf       	rjmp	.-30     	; 0x4d2 <main+0x6>

Disassembly of section .text.__vector_16:

00000310 <__vector_16>:
    }
}  /* Fin de la principal */

/* Función que realiza interrupción */
ISR (TIMER0_OVF_vect)
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	OCR0A = ((duty_cycle/100) * 1023); /* recalcula el nivel del comparador */
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	48 ec       	ldi	r20, 0xC8	; 200
 338:	52 e4       	ldi	r21, 0x42	; 66
 33a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <duty_cycle>
 33e:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <duty_cycle+0x1>
 342:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <duty_cycle+0x2>
 346:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <duty_cycle+0x3>
 34a:	0e 94 af 02 	call	0x55e	; 0x55e <__divsf3>
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 ec       	ldi	r19, 0xC0	; 192
 352:	4f e7       	ldi	r20, 0x7F	; 127
 354:	54 e4       	ldi	r21, 0x44	; 68
 356:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 35a:	0e 94 c1 01 	call	0x382	; 0x382 <__fixunssfsi>
 35e:	67 bd       	out	0x27, r22	; 39
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

Disassembly of section .text:

0000055e <__divsf3>:
 55e:	0e 94 64 00 	call	0xc8	; 0xc8 <__data_load_end>
 562:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_round>

Disassembly of section .text:

000000c8 <__divsf3x>:
  c8:	10 c0       	rjmp	.+32     	; 0xea <__divsf3x+0x22>
  ca:	0e 94 9b 02 	call	0x536	; 0x536 <__fp_pscB>
  ce:	58 f0       	brcs	.+22     	; 0xe6 <__divsf3x+0x1e>
  d0:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscA>
  d4:	40 f0       	brcs	.+16     	; 0xe6 <__divsf3x+0x1e>
  d6:	29 f4       	brne	.+10     	; 0xe2 <__divsf3x+0x1a>
  d8:	5f 3f       	cpi	r21, 0xFF	; 255
  da:	29 f0       	breq	.+10     	; 0xe6 <__divsf3x+0x1e>
  dc:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
  e0:	51 11       	cpse	r21, r1
  e2:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
  e6:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
  ea:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_split3>
  ee:	68 f3       	brcs	.-38     	; 0xca <__divsf3x+0x2>

000000f0 <__divsf3_pse>:
  f0:	99 23       	and	r25, r25
  f2:	b1 f3       	breq	.-20     	; 0xe0 <__divsf3x+0x18>
  f4:	55 23       	and	r21, r21
  f6:	91 f3       	breq	.-28     	; 0xdc <__divsf3x+0x14>
  f8:	95 1b       	sub	r25, r21
  fa:	55 0b       	sbc	r21, r21
  fc:	bb 27       	eor	r27, r27
  fe:	aa 27       	eor	r26, r26
 100:	62 17       	cp	r22, r18
 102:	73 07       	cpc	r23, r19
 104:	84 07       	cpc	r24, r20
 106:	38 f0       	brcs	.+14     	; 0x116 <__divsf3_pse+0x26>
 108:	9f 5f       	subi	r25, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	44 1f       	adc	r20, r20
 112:	aa 1f       	adc	r26, r26
 114:	a9 f3       	breq	.-22     	; 0x100 <__divsf3_pse+0x10>
 116:	35 d0       	rcall	.+106    	; 0x182 <__divsf3_pse+0x92>
 118:	0e 2e       	mov	r0, r30
 11a:	3a f0       	brmi	.+14     	; 0x12a <__divsf3_pse+0x3a>
 11c:	e0 e8       	ldi	r30, 0x80	; 128
 11e:	32 d0       	rcall	.+100    	; 0x184 <__divsf3_pse+0x94>
 120:	91 50       	subi	r25, 0x01	; 1
 122:	50 40       	sbci	r21, 0x00	; 0
 124:	e6 95       	lsr	r30
 126:	00 1c       	adc	r0, r0
 128:	ca f7       	brpl	.-14     	; 0x11c <__divsf3_pse+0x2c>
 12a:	2b d0       	rcall	.+86     	; 0x182 <__divsf3_pse+0x92>
 12c:	fe 2f       	mov	r31, r30
 12e:	29 d0       	rcall	.+82     	; 0x182 <__divsf3_pse+0x92>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	88 1f       	adc	r24, r24
 136:	bb 1f       	adc	r27, r27
 138:	26 17       	cp	r18, r22
 13a:	37 07       	cpc	r19, r23
 13c:	48 07       	cpc	r20, r24
 13e:	ab 07       	cpc	r26, r27
 140:	b0 e8       	ldi	r27, 0x80	; 128
 142:	09 f0       	breq	.+2      	; 0x146 <__divsf3_pse+0x56>
 144:	bb 0b       	sbc	r27, r27
 146:	80 2d       	mov	r24, r0
 148:	bf 01       	movw	r22, r30
 14a:	ff 27       	eor	r31, r31
 14c:	93 58       	subi	r25, 0x83	; 131
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	3a f0       	brmi	.+14     	; 0x160 <__divsf3_pse+0x70>
 152:	9e 3f       	cpi	r25, 0xFE	; 254
 154:	51 05       	cpc	r21, r1
 156:	78 f0       	brcs	.+30     	; 0x176 <__divsf3_pse+0x86>
 158:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 15c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 160:	5f 3f       	cpi	r21, 0xFF	; 255
 162:	e4 f3       	brlt	.-8      	; 0x15c <__divsf3_pse+0x6c>
 164:	98 3e       	cpi	r25, 0xE8	; 232
 166:	d4 f3       	brlt	.-12     	; 0x15c <__divsf3_pse+0x6c>
 168:	86 95       	lsr	r24
 16a:	77 95       	ror	r23
 16c:	67 95       	ror	r22
 16e:	b7 95       	ror	r27
 170:	f7 95       	ror	r31
 172:	9f 5f       	subi	r25, 0xFF	; 255
 174:	c9 f7       	brne	.-14     	; 0x168 <__divsf3_pse+0x78>
 176:	88 0f       	add	r24, r24
 178:	91 1d       	adc	r25, r1
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	97 f9       	bld	r25, 7
 180:	08 95       	ret
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	88 1f       	adc	r24, r24
 18a:	bb 1f       	adc	r27, r27
 18c:	62 17       	cp	r22, r18
 18e:	73 07       	cpc	r23, r19
 190:	84 07       	cpc	r24, r20
 192:	ba 07       	cpc	r27, r26
 194:	20 f0       	brcs	.+8      	; 0x19e <__divsf3_pse+0xae>
 196:	62 1b       	sub	r22, r18
 198:	73 0b       	sbc	r23, r19
 19a:	84 0b       	sbc	r24, r20
 19c:	ba 0b       	sbc	r27, r26
 19e:	ee 1f       	adc	r30, r30
 1a0:	88 f7       	brcc	.-30     	; 0x184 <__divsf3_pse+0x94>
 1a2:	e0 95       	com	r30
 1a4:	08 95       	ret

Disassembly of section .text:

00000382 <__fixunssfsi>:
 382:	0e 94 1e 02 	call	0x43c	; 0x43c <__fp_splitA>
 386:	88 f0       	brcs	.+34     	; 0x3aa <__fixunssfsi+0x28>
 388:	9f 57       	subi	r25, 0x7F	; 127
 38a:	98 f0       	brcs	.+38     	; 0x3b2 <__fixunssfsi+0x30>
 38c:	b9 2f       	mov	r27, r25
 38e:	99 27       	eor	r25, r25
 390:	b7 51       	subi	r27, 0x17	; 23
 392:	b0 f0       	brcs	.+44     	; 0x3c0 <__fixunssfsi+0x3e>
 394:	e1 f0       	breq	.+56     	; 0x3ce <__fixunssfsi+0x4c>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	88 1f       	adc	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	1a f0       	brmi	.+6      	; 0x3a6 <__fixunssfsi+0x24>
 3a0:	ba 95       	dec	r27
 3a2:	c9 f7       	brne	.-14     	; 0x396 <__fixunssfsi+0x14>
 3a4:	14 c0       	rjmp	.+40     	; 0x3ce <__fixunssfsi+0x4c>
 3a6:	b1 30       	cpi	r27, 0x01	; 1
 3a8:	91 f0       	breq	.+36     	; 0x3ce <__fixunssfsi+0x4c>
 3aa:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_zero>
 3ae:	b1 e0       	ldi	r27, 0x01	; 1
 3b0:	08 95       	ret
 3b2:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_zero>
 3b6:	67 2f       	mov	r22, r23
 3b8:	78 2f       	mov	r23, r24
 3ba:	88 27       	eor	r24, r24
 3bc:	b8 5f       	subi	r27, 0xF8	; 248
 3be:	39 f0       	breq	.+14     	; 0x3ce <__fixunssfsi+0x4c>
 3c0:	b9 3f       	cpi	r27, 0xF9	; 249
 3c2:	cc f3       	brlt	.-14     	; 0x3b6 <__fixunssfsi+0x34>
 3c4:	86 95       	lsr	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b3 95       	inc	r27
 3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__fixunssfsi+0x42>
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__fixunssfsi+0x5c>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

Disassembly of section .text:

00000552 <__fp_inf>:
 552:	97 f9       	bld	r25, 7
 554:	9f 67       	ori	r25, 0x7F	; 127
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	08 95       	ret

Disassembly of section .text:

0000056e <__fp_nan>:
 56e:	9f ef       	ldi	r25, 0xFF	; 255
 570:	80 ec       	ldi	r24, 0xC0	; 192
 572:	08 95       	ret

Disassembly of section .text:

00000528 <__fp_pscA>:
 528:	00 24       	eor	r0, r0
 52a:	0a 94       	dec	r0
 52c:	16 16       	cp	r1, r22
 52e:	17 06       	cpc	r1, r23
 530:	18 06       	cpc	r1, r24
 532:	09 06       	cpc	r0, r25
 534:	08 95       	ret

Disassembly of section .text:

00000536 <__fp_pscB>:
 536:	00 24       	eor	r0, r0
 538:	0a 94       	dec	r0
 53a:	12 16       	cp	r1, r18
 53c:	13 06       	cpc	r1, r19
 53e:	14 06       	cpc	r1, r20
 540:	05 06       	cpc	r0, r21
 542:	08 95       	ret

Disassembly of section .text:

000004f0 <__fp_round>:
 4f0:	09 2e       	mov	r0, r25
 4f2:	03 94       	inc	r0
 4f4:	00 0c       	add	r0, r0
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0xc>
 4f8:	88 23       	and	r24, r24
 4fa:	52 f0       	brmi	.+20     	; 0x510 <__fp_round+0x20>
 4fc:	bb 0f       	add	r27, r27
 4fe:	40 f4       	brcc	.+16     	; 0x510 <__fp_round+0x20>
 500:	bf 2b       	or	r27, r31
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0x18>
 504:	60 ff       	sbrs	r22, 0
 506:	04 c0       	rjmp	.+8      	; 0x510 <__fp_round+0x20>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

Disassembly of section .text:

0000042c <__fp_split3>:
 42c:	57 fd       	sbrc	r21, 7
 42e:	90 58       	subi	r25, 0x80	; 128
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	59 f0       	breq	.+22     	; 0x44c <__fp_splitA+0x10>
 436:	5f 3f       	cpi	r21, 0xFF	; 255
 438:	71 f0       	breq	.+28     	; 0x456 <__fp_splitA+0x1a>
 43a:	47 95       	ror	r20

0000043c <__fp_splitA>:
 43c:	88 0f       	add	r24, r24
 43e:	97 fb       	bst	r25, 7
 440:	99 1f       	adc	r25, r25
 442:	61 f0       	breq	.+24     	; 0x45c <__fp_splitA+0x20>
 444:	9f 3f       	cpi	r25, 0xFF	; 255
 446:	79 f0       	breq	.+30     	; 0x466 <__fp_splitA+0x2a>
 448:	87 95       	ror	r24
 44a:	08 95       	ret
 44c:	12 16       	cp	r1, r18
 44e:	13 06       	cpc	r1, r19
 450:	14 06       	cpc	r1, r20
 452:	55 1f       	adc	r21, r21
 454:	f2 cf       	rjmp	.-28     	; 0x43a <__fp_split3+0xe>
 456:	46 95       	lsr	r20
 458:	f1 df       	rcall	.-30     	; 0x43c <__fp_splitA>
 45a:	08 c0       	rjmp	.+16     	; 0x46c <__fp_splitA+0x30>
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	18 06       	cpc	r1, r24
 462:	99 1f       	adc	r25, r25
 464:	f1 cf       	rjmp	.-30     	; 0x448 <__fp_splitA+0xc>
 466:	86 95       	lsr	r24
 468:	71 05       	cpc	r23, r1
 46a:	61 05       	cpc	r22, r1
 46c:	08 94       	sec
 46e:	08 95       	ret

Disassembly of section .text:

00000544 <__fp_zero>:
 544:	e8 94       	clt

00000546 <__fp_szero>:
 546:	bb 27       	eor	r27, r27
 548:	66 27       	eor	r22, r22
 54a:	77 27       	eor	r23, r23
 54c:	cb 01       	movw	r24, r22
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

Disassembly of section .text:

00000566 <__mulsf3>:
 566:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__mulsf3x>
 56a:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_round>

Disassembly of section .text:

000001a6 <__mulsf3x>:
 1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <__mulsf3x+0x20>
 1a8:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscA>
 1ac:	38 f0       	brcs	.+14     	; 0x1bc <__mulsf3x+0x16>
 1ae:	0e 94 9b 02 	call	0x536	; 0x536 <__fp_pscB>
 1b2:	20 f0       	brcs	.+8      	; 0x1bc <__mulsf3x+0x16>
 1b4:	95 23       	and	r25, r21
 1b6:	11 f0       	breq	.+4      	; 0x1bc <__mulsf3x+0x16>
 1b8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 1bc:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 1c0:	11 24       	eor	r1, r1
 1c2:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 1c6:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_split3>
 1ca:	70 f3       	brcs	.-36     	; 0x1a8 <__mulsf3x+0x2>

000001cc <__mulsf3_pse>:
 1cc:	95 9f       	mul	r25, r21
 1ce:	c1 f3       	breq	.-16     	; 0x1c0 <__mulsf3x+0x1a>
 1d0:	95 0f       	add	r25, r21
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	55 1f       	adc	r21, r21
 1d6:	62 9f       	mul	r22, r18
 1d8:	f0 01       	movw	r30, r0
 1da:	72 9f       	mul	r23, r18
 1dc:	bb 27       	eor	r27, r27
 1de:	f0 0d       	add	r31, r0
 1e0:	b1 1d       	adc	r27, r1
 1e2:	63 9f       	mul	r22, r19
 1e4:	aa 27       	eor	r26, r26
 1e6:	f0 0d       	add	r31, r0
 1e8:	b1 1d       	adc	r27, r1
 1ea:	aa 1f       	adc	r26, r26
 1ec:	64 9f       	mul	r22, r20
 1ee:	66 27       	eor	r22, r22
 1f0:	b0 0d       	add	r27, r0
 1f2:	a1 1d       	adc	r26, r1
 1f4:	66 1f       	adc	r22, r22
 1f6:	82 9f       	mul	r24, r18
 1f8:	22 27       	eor	r18, r18
 1fa:	b0 0d       	add	r27, r0
 1fc:	a1 1d       	adc	r26, r1
 1fe:	62 1f       	adc	r22, r18
 200:	73 9f       	mul	r23, r19
 202:	b0 0d       	add	r27, r0
 204:	a1 1d       	adc	r26, r1
 206:	62 1f       	adc	r22, r18
 208:	83 9f       	mul	r24, r19
 20a:	a0 0d       	add	r26, r0
 20c:	61 1d       	adc	r22, r1
 20e:	22 1f       	adc	r18, r18
 210:	74 9f       	mul	r23, r20
 212:	33 27       	eor	r19, r19
 214:	a0 0d       	add	r26, r0
 216:	61 1d       	adc	r22, r1
 218:	23 1f       	adc	r18, r19
 21a:	84 9f       	mul	r24, r20
 21c:	60 0d       	add	r22, r0
 21e:	21 1d       	adc	r18, r1
 220:	82 2f       	mov	r24, r18
 222:	76 2f       	mov	r23, r22
 224:	6a 2f       	mov	r22, r26
 226:	11 24       	eor	r1, r1
 228:	9f 57       	subi	r25, 0x7F	; 127
 22a:	50 40       	sbci	r21, 0x00	; 0
 22c:	9a f0       	brmi	.+38     	; 0x254 <__mulsf3_pse+0x88>
 22e:	f1 f0       	breq	.+60     	; 0x26c <__mulsf3_pse+0xa0>
 230:	88 23       	and	r24, r24
 232:	4a f0       	brmi	.+18     	; 0x246 <__mulsf3_pse+0x7a>
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	bb 1f       	adc	r27, r27
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	91 50       	subi	r25, 0x01	; 1
 242:	50 40       	sbci	r21, 0x00	; 0
 244:	a9 f7       	brne	.-22     	; 0x230 <__mulsf3_pse+0x64>
 246:	9e 3f       	cpi	r25, 0xFE	; 254
 248:	51 05       	cpc	r21, r1
 24a:	80 f0       	brcs	.+32     	; 0x26c <__mulsf3_pse+0xa0>
 24c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 250:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 254:	5f 3f       	cpi	r21, 0xFF	; 255
 256:	e4 f3       	brlt	.-8      	; 0x250 <__mulsf3_pse+0x84>
 258:	98 3e       	cpi	r25, 0xE8	; 232
 25a:	d4 f3       	brlt	.-12     	; 0x250 <__mulsf3_pse+0x84>
 25c:	86 95       	lsr	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	b7 95       	ror	r27
 264:	f7 95       	ror	r31
 266:	e7 95       	ror	r30
 268:	9f 5f       	subi	r25, 0xFF	; 255
 26a:	c1 f7       	brne	.-16     	; 0x25c <__mulsf3_pse+0x90>
 26c:	fe 2b       	or	r31, r30
 26e:	88 0f       	add	r24, r24
 270:	91 1d       	adc	r25, r1
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	97 f9       	bld	r25, 7
 278:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000057c <_fini>:
 57c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000057e <__funcs_on_exit>:
 57e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000580 <__simulator_exit>:
 580:	08 95       	ret

Disassembly of section .text.exit:

00000512 <exit>:
 512:	ec 01       	movw	r28, r24
 514:	0e 94 bf 02 	call	0x57e	; 0x57e <__funcs_on_exit>
 518:	0e 94 be 02 	call	0x57c	; 0x57c <_fini>
 51c:	ce 01       	movw	r24, r28
 51e:	0e 94 c0 02 	call	0x580	; 0x580 <__simulator_exit>
 522:	ce 01       	movw	r24, r28
 524:	0e 94 bc 02 	call	0x578	; 0x578 <_Exit>

Disassembly of section .text._Exit:

00000578 <_Exit>:
 578:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
